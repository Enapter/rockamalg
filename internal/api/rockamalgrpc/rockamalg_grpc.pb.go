// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: rockamalg.proto

package rockamalgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RockamalgClient is the client API for Rockamalg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RockamalgClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Amalg(ctx context.Context, in *AmalgRequest, opts ...grpc.CallOption) (*AmalgResponse, error)
}

type rockamalgClient struct {
	cc grpc.ClientConnInterface
}

func NewRockamalgClient(cc grpc.ClientConnInterface) RockamalgClient {
	return &rockamalgClient{cc}
}

func (c *rockamalgClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rockamalg.rpc.Rockamalg/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rockamalgClient) Amalg(ctx context.Context, in *AmalgRequest, opts ...grpc.CallOption) (*AmalgResponse, error) {
	out := new(AmalgResponse)
	err := c.cc.Invoke(ctx, "/rockamalg.rpc.Rockamalg/Amalg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RockamalgServer is the server API for Rockamalg service.
// All implementations must embed UnimplementedRockamalgServer
// for forward compatibility
type RockamalgServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Amalg(context.Context, *AmalgRequest) (*AmalgResponse, error)
	mustEmbedUnimplementedRockamalgServer()
}

// UnimplementedRockamalgServer must be embedded to have forward compatible implementations.
type UnimplementedRockamalgServer struct {
}

func (UnimplementedRockamalgServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRockamalgServer) Amalg(context.Context, *AmalgRequest) (*AmalgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Amalg not implemented")
}
func (UnimplementedRockamalgServer) mustEmbedUnimplementedRockamalgServer() {}

// UnsafeRockamalgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RockamalgServer will
// result in compilation errors.
type UnsafeRockamalgServer interface {
	mustEmbedUnimplementedRockamalgServer()
}

func RegisterRockamalgServer(s grpc.ServiceRegistrar, srv RockamalgServer) {
	s.RegisterService(&Rockamalg_ServiceDesc, srv)
}

func _Rockamalg_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockamalgServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockamalg.rpc.Rockamalg/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockamalgServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rockamalg_Amalg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmalgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockamalgServer).Amalg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rockamalg.rpc.Rockamalg/Amalg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockamalgServer).Amalg(ctx, req.(*AmalgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rockamalg_ServiceDesc is the grpc.ServiceDesc for Rockamalg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rockamalg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rockamalg.rpc.Rockamalg",
	HandlerType: (*RockamalgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Rockamalg_Ping_Handler,
		},
		{
			MethodName: "Amalg",
			Handler:    _Rockamalg_Amalg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rockamalg.proto",
}
